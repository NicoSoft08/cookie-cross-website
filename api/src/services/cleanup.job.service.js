const cron = require('node-cron');
const VerificationCodeService = require('./verificationCode.service');
const { PrismaClient } = require('../generated/prisma');

const prisma = new PrismaClient();

class CleanupJob {

    static async cleanupPresence() {
        // Toutes les 2 minutes
        cron.schedule('*/2 * * * *', async () => {
            const thresholdDate = new Date(Date.now() - 2 * 60 * 1000); // 2 minutes

            try {
                const result = await prisma.user.updateMany({
                    where: {
                        isOnline: true,
                        lastOnline: {
                            lt: thresholdDate, // lastOnline < il y a 2 min
                        },
                    },
                    data: {
                        isOnline: false,
                    },
                });

                console.log(`[PRESENCE CRON] ${result.count} utilisateurs pass√©s hors ligne.`);
            } catch (error) {
                console.error('[PRESENCE CRON ERROR]', error);
            }
        });
    }

    /**
     * Nettoyer les codes de v√©rification expir√©s
     */
    static async cleanupExpiredCodes() {
        try {
            console.log('üßπ D√©but du nettoyage des codes expir√©s...');

            const deletedCount = await VerificationCodeService.cleanupExpiredCodes();

            console.log(`‚úÖ ${deletedCount} codes expir√©s supprim√©s`);
            return deletedCount;
        } catch (error) {
            console.error('‚ùå Erreur lors du nettoyage des codes:', error);
            return 0;
        }
    }

    /**
     * Nettoyer les utilisateurs non v√©rifi√©s apr√®s 24h
     */
    static async cleanupUnverifiedUsers() {
        try {
            console.log('üßπ D√©but du nettoyage des utilisateurs non v√©rifi√©s...');

            const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);

            const unverifiedUsers = await prisma.user.findMany({
                where: {
                    emailVerified: false,
                    createdAt: {
                        lt: oneDayAgo
                    }
                },
                select: {
                    id: true,
                    email: true,
                    createdAt: true
                }
            });

            if (unverifiedUsers.length > 0) {
                // Supprimer les codes de v√©rification associ√©s
                await prisma.verificationCode.deleteMany({
                    where: {
                        userId: {
                            in: unverifiedUsers.map(user => user.id)
                        }
                    }
                });

                // Supprimer les utilisateurs non v√©rifi√©s
                const result = await prisma.user.deleteMany({
                    where: {
                        id: {
                            in: unverifiedUsers.map(user => user.id)
                        }
                    }
                });

                console.log(`‚úÖ ${result.count} utilisateurs non v√©rifi√©s supprim√©s`);
                return result.count;
            } else {
                console.log('‚ÑπÔ∏è  Aucun utilisateur non v√©rifi√© √† supprimer');
                return 0;
            }
        } catch (error) {
            console.error('‚ùå Erreur lors du nettoyage des utilisateurs:', error);
            return 0;
        }
    }

    /**
     * Nettoyer les sessions expir√©es (si vous utilisez des sessions en DB)
     */
    static async cleanupExpiredSessions() {
        try {
            console.log('üßπ D√©but du nettoyage des sessions expir√©es...');

            // Si vous avez une table Session
            const result = await prisma.session?.deleteMany({
                where: {
                    expiresAt: {
                        lt: new Date()
                    }
                }
            });

            if (result) {
                console.log(`‚úÖ ${result.count} sessions expir√©es supprim√©es`);
                return result.count;
            }

            return 0;
        } catch (error) {
            console.error('‚ùå Erreur lors du nettoyage des sessions:', error);
            return 0;
        }
    }

    /**
     * Nettoyer les annonces expir√©es
     */
    static async cleanupExpiredListings() {
        try {
            console.log('üßπ D√©but du nettoyage des annonces expir√©es...');

            const now = new Date();

            // Marquer les annonces comme expir√©es
            const result = await prisma.listing.updateMany({
                where: {
                    expiresAt: {
                        lt: now
                    },
                    status: {
                        in: ['ACTIVE', 'PENDING']
                    }
                },
                data: {
                    status: 'EXPIRED'
                }
            });

            console.log(`‚úÖ ${result.count} annonces marqu√©es comme expir√©es`);
            return result.count;
        } catch (error) {
            console.error('‚ùå Erreur lors du nettoyage des annonces:', error);
            return 0;
        }
    }

    /**
     * Nettoyer les fichiers temporaires
     */
    static async cleanupTempFiles() {
        try {
            console.log('üßπ D√©but du nettoyage des fichiers temporaires...');

            const fs = require('fs').promises;
            const path = require('path');

            const tempDir = path.join(process.cwd(), 'temp');
            const oneDayAgo = Date.now() - 24 * 60 * 60 * 1000;

            try {
                const files = await fs.readdir(tempDir);
                let deletedCount = 0;

                for (const file of files) {
                    const filePath = path.join(tempDir, file);
                    const stats = await fs.stat(filePath);

                    if (stats.mtime.getTime() < oneDayAgo) {
                        await fs.unlink(filePath);
                        deletedCount++;
                    }
                }

                console.log(`‚úÖ ${deletedCount} fichiers temporaires supprim√©s`);
                return deletedCount;
            } catch (error) {
                if (error.code !== 'ENOENT') {
                    throw error;
                }
                return 0;
            }
        } catch (error) {
            console.error('‚ùå Erreur lors du nettoyage des fichiers:', error);
            return 0;
        }
    }

    /**
     * Ex√©cuter toutes les t√¢ches de nettoyage
     */
    static async runAllCleanupTasks() {
        console.log('üöÄ D√©but des t√¢ches de nettoyage automatique...');

        const startTime = Date.now();
        const results = {};

        try {
            // Nettoyer les codes expir√©s
            results.expiredCodes = await this.cleanupExpiredCodes();

            // Nettoyer les utilisateurs non v√©rifi√©s
            results.unverifiedUsers = await this.cleanupUnverifiedUsers();

            // Nettoyer les sessions expir√©es
            results.expiredSessions = await this.cleanupExpiredSessions();

            // Nettoyer les annonces expir√©es
            results.expiredListings = await this.cleanupExpiredListings();

            // Nettoyer les fichiers temporaires
            results.tempFiles = await this.cleanupTempFiles();

            const duration = Date.now() - startTime;

            console.log('üéâ T√¢ches de nettoyage termin√©es!');
            console.log(`‚è±Ô∏è  Dur√©e: ${duration}ms`);
            console.log('üìä R√©sultats:', results);

            return {
                success: true,
                duration,
                results
            };

        } catch (error) {
            console.error('‚ùå Erreur lors des t√¢ches de nettoyage:', error);
            return {
                success: false,
                error: error.message,
                results
            };
        }
    }

    /**
     * D√©marrer les t√¢ches programm√©es
     */
    static startScheduledTasks() {
        console.log('üìÖ D√©marrage des t√¢ches programm√©es...');

        // Nettoyer les codes expir√©s toutes les heures
        cron.schedule('0 * * * *', async () => {
            console.log('‚è∞ Ex√©cution programm√©e: nettoyage des codes expir√©s');
            await this.cleanupExpiredCodes();
        });

        // Nettoyer les utilisateurs non v√©rifi√©s tous les jours √† 2h du matin
        cron.schedule('0 2 * * *', async () => {
            console.log('‚è∞ Ex√©cution programm√©e: nettoyage des utilisateurs non v√©rifi√©s');
            await this.cleanupUnverifiedUsers();
        });

        // Nettoyer les annonces expir√©es tous les jours √† 3h du matin
        cron.schedule('0 3 * * *', async () => {
            console.log('‚è∞ Ex√©cution programm√©e: nettoyage des annonces expir√©es');
            await this.cleanupExpiredListings();
        });

        // Nettoyer les fichiers temporaires tous les jours √† 4h du matin
        cron.schedule('0 4 * * *', async () => {
            console.log('‚è∞ Ex√©cution programm√©e: nettoyage des fichiers temporaires');
            await this.cleanupTempFiles();
        });

        // Nettoyage complet tous les dimanches √† 1h du matin
        cron.schedule('0 1 * * 0', async () => {
            console.log('‚è∞ Ex√©cution programm√©e: nettoyage complet hebdomadaire');
            await this.runAllCleanupTasks();
        });

        console.log('‚úÖ T√¢ches programm√©es d√©marr√©es avec succ√®s');
    }

    /**
     * Arr√™ter toutes les t√¢ches programm√©es
     */
    static stopScheduledTasks() {
        cron.getTasks().forEach(task => {
            task.stop();
        });
        console.log('üõë Toutes les t√¢ches programm√©es ont √©t√© arr√™t√©es');
    }
}

module.exports = CleanupJob;
